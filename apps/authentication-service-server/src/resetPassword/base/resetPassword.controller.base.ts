/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResetPasswordService } from "../resetPassword.service";
import { ResetPasswordCreateInput } from "./ResetPasswordCreateInput";
import { ResetPassword } from "./ResetPassword";
import { ResetPasswordFindManyArgs } from "./ResetPasswordFindManyArgs";
import { ResetPasswordWhereUniqueInput } from "./ResetPasswordWhereUniqueInput";
import { ResetPasswordUpdateInput } from "./ResetPasswordUpdateInput";

export class ResetPasswordControllerBase {
  constructor(protected readonly service: ResetPasswordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ResetPassword })
  async createResetPassword(
    @common.Body() data: ResetPasswordCreateInput
  ): Promise<ResetPassword> {
    return await this.service.createResetPassword({
      data: data,
      select: {
        confirmPassword: true,
        createdAt: true,
        email: true,
        id: true,
        newPassword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ResetPassword] })
  @ApiNestedQuery(ResetPasswordFindManyArgs)
  async resetPasswords(
    @common.Req() request: Request
  ): Promise<ResetPassword[]> {
    const args = plainToClass(ResetPasswordFindManyArgs, request.query);
    return this.service.resetPasswords({
      ...args,
      select: {
        confirmPassword: true,
        createdAt: true,
        email: true,
        id: true,
        newPassword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ResetPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resetPassword(
    @common.Param() params: ResetPasswordWhereUniqueInput
  ): Promise<ResetPassword | null> {
    const result = await this.service.resetPassword({
      where: params,
      select: {
        confirmPassword: true,
        createdAt: true,
        email: true,
        id: true,
        newPassword: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ResetPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResetPassword(
    @common.Param() params: ResetPasswordWhereUniqueInput,
    @common.Body() data: ResetPasswordUpdateInput
  ): Promise<ResetPassword | null> {
    try {
      return await this.service.updateResetPassword({
        where: params,
        data: data,
        select: {
          confirmPassword: true,
          createdAt: true,
          email: true,
          id: true,
          newPassword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ResetPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResetPassword(
    @common.Param() params: ResetPasswordWhereUniqueInput
  ): Promise<ResetPassword | null> {
    try {
      return await this.service.deleteResetPassword({
        where: params,
        select: {
          confirmPassword: true,
          createdAt: true,
          email: true,
          id: true,
          newPassword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
