/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ResetPassword } from "./ResetPassword";
import { ResetPasswordCountArgs } from "./ResetPasswordCountArgs";
import { ResetPasswordFindManyArgs } from "./ResetPasswordFindManyArgs";
import { ResetPasswordFindUniqueArgs } from "./ResetPasswordFindUniqueArgs";
import { CreateResetPasswordArgs } from "./CreateResetPasswordArgs";
import { UpdateResetPasswordArgs } from "./UpdateResetPasswordArgs";
import { DeleteResetPasswordArgs } from "./DeleteResetPasswordArgs";
import { ResetPasswordService } from "../resetPassword.service";
@graphql.Resolver(() => ResetPassword)
export class ResetPasswordResolverBase {
  constructor(protected readonly service: ResetPasswordService) {}

  async _resetPasswordsMeta(
    @graphql.Args() args: ResetPasswordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ResetPassword])
  async resetPasswords(
    @graphql.Args() args: ResetPasswordFindManyArgs
  ): Promise<ResetPassword[]> {
    return this.service.resetPasswords(args);
  }

  @graphql.Query(() => ResetPassword, { nullable: true })
  async resetPassword(
    @graphql.Args() args: ResetPasswordFindUniqueArgs
  ): Promise<ResetPassword | null> {
    const result = await this.service.resetPassword(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ResetPassword)
  async createResetPassword(
    @graphql.Args() args: CreateResetPasswordArgs
  ): Promise<ResetPassword> {
    return await this.service.createResetPassword({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ResetPassword)
  async updateResetPassword(
    @graphql.Args() args: UpdateResetPasswordArgs
  ): Promise<ResetPassword | null> {
    try {
      return await this.service.updateResetPassword({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ResetPassword)
  async deleteResetPassword(
    @graphql.Args() args: DeleteResetPasswordArgs
  ): Promise<ResetPassword | null> {
    try {
      return await this.service.deleteResetPassword(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
