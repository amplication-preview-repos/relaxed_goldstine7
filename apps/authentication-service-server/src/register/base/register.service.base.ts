/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Register as PrismaRegister } from "@prisma/client";

export class RegisterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RegisterCountArgs, "select">): Promise<number> {
    return this.prisma.register.count(args);
  }

  async registers(
    args: Prisma.RegisterFindManyArgs
  ): Promise<PrismaRegister[]> {
    return this.prisma.register.findMany(args);
  }
  async register(
    args: Prisma.RegisterFindUniqueArgs
  ): Promise<PrismaRegister | null> {
    return this.prisma.register.findUnique(args);
  }
  async createRegister(
    args: Prisma.RegisterCreateArgs
  ): Promise<PrismaRegister> {
    return this.prisma.register.create(args);
  }
  async updateRegister(
    args: Prisma.RegisterUpdateArgs
  ): Promise<PrismaRegister> {
    return this.prisma.register.update(args);
  }
  async deleteRegister(
    args: Prisma.RegisterDeleteArgs
  ): Promise<PrismaRegister> {
    return this.prisma.register.delete(args);
  }
}
